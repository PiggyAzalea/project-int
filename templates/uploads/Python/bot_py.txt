from telebot import types
import telebot
from loguru import logger
import os
import time
from img_proc import Img  # Ensure this import matches your project structure

class Bot:
    def __init__(self, token, telegram_chat_url):
        self.telegram_bot_client = telebot.TeleBot(token)
        self.telegram_bot_client.remove_webhook()
        time.sleep(0.5)
        self.telegram_bot_client.set_webhook(url=f'{telegram_chat_url}/{token}/', timeout=60)
        self.user_images = {}  # Dictionary to track user image paths

    def send_menu(self, chat_id):
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        buttons = ['Blur', 'Rotate', 'Salt & Pepper', 'Contour', 'Concatenate', 'Segment']
        for button in buttons:
            markup.add(types.KeyboardButton(button))
        self.telegram_bot_client.send_message(chat_id, "Choose an action:", reply_markup=markup)

    def handle_message(self, msg):
        chat_id = msg.chat.id
        if msg.content_type == 'photo':
            img_path = self.download_user_photo(msg)
            self.user_images[chat_id] = img_path
            self.send_menu(chat_id)
        elif msg.text in ['Blur', 'Rotate', 'Salt & Pepper', 'Contour', 'Concatenate', 'Segment']:
            self.apply_filter(chat_id, msg.text)
        else:
            self.send_menu(chat_id)

    # Include methods for download_user_photo, apply_filter, etc.

class ImageProcessingBot(Bot):
    def handle_message(self, msg):
        chat_id = msg['chat']['id']
        if self.is_current_msg_photo(msg):
            img_path = self.download_user_photo(msg)
            markup = self.generate_markup()
            self.send_text(chat_id, "Image received! Please choose a filter:", reply_markup=markup)
            self.current_image_path = img_path  # Storing the path to use after filter selection
        else:
            command = msg.get('text', '').lower()
            if command in ['blur', 'rotate', 'salt & pepper', 'contour', 'concatenate', 'segment']:
                self.apply_filter(command, chat_id)
            else:
                self.send_text(chat_id, "Please send an image or choose a filter.")

    def generate_markup(self):
        markup = ReplyKeyboardMarkup(one_time_keyboard=True)
        buttons = ['Blur', 'Rotate', 'Salt & Pepper', 'Contour', 'Concatenate', 'Segment']
        markup.row(*(KeyboardButton(text) for text in buttons))
        return markup

    def apply_filter(self, filter_type, chat_id):
        img = Img(self.current_image_path)
        if filter_type == 'blur':
            img.blur(blur_level=8)
        elif filter_type == 'rotate':
            img.rotate(90)  # Example rotation
        elif filter_type == 'salt & pepper':
            img.salt_n_pepper()
        elif filter_type == 'contour':
            img.contour()
        elif filter_type == 'concatenate':
            # This example just duplicates the same image for demonstration
            other_img = Img(self.current_image_path)
            img.concat(other_img, direction='horizontal')
        elif filter_type == 'segment':
            img.segment()

        processed_path = img.save_img()
        self.send_photo(chat_id, processed_path)

# Example to create and run bot in app.py would remain mostly the same
