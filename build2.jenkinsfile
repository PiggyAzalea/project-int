pipeline {
    agent {
        docker {
            image 'exaclly/my-docker-agent:latest'
            args '--user root -v /var/run/docker.sock:/var/run/docker.sock -v /custom/jenkins/workspace:/home/jenkins/agent/workspace -w /home/jenkins/agent/workspace'
        }
    }

    options {
        buildDiscarder(logRotator(daysToKeepStr: '30'))
        disableConcurrentBuilds()
        timestamps()
    }

    environment {
        JENKINS_IMG_NAME = "jenkins-agent:${BUILD_NUMBER}"
    }

    stages {
        stage('Prepare Workspace') {
            steps {
                script {
                    // Ensure the workspace directory exists and is writable
                    sh 'mkdir -p /home/jenkins/agent/workspace'
                    sh 'chmod -R 777 /home/jenkins/agent/workspace'
                }
            }
        }

        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Build Docker Image') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockeragent', usernameVariable: 'USERNAME', passwordVariable: 'USERPASS')]) {
                    script {
                        sh '''
                            echo $USERPASS | docker login -u $USERNAME --password-stdin
                            docker build -t $JENKINS_IMG_NAME -f Dockerfile.agent .
                            docker tag $JENKINS_IMG_NAME exaclly/$JENKINS_IMG_NAME
                            docker push exaclly/$JENKINS_IMG_NAME
                        '''
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                echo 'Starting cleanup process...'
                try {
                    sh '''
                        echo "Removing Docker image: exaclly/$JENKINS_IMG_NAME"
                        docker rmi exaclly/$JENKINS_IMG_NAME || echo "Image exaclly/$JENKINS_IMG_NAME already removed or not found."
                    '''
                } catch (Exception e) {
                    echo "Error during Docker image removal: ${e.getMessage()}"
                }

            }
        }
    }
}
