pipeline {
    agent {
        docker {
            image 'exaclly/jenkins-agent:latest'
            args '--user root -v /var/run/docker.sock:/var/run/docker.sock -v /custom/jenkins/workspace:/home/jenkins/agent/workspace -w /home/jenkins/agent/workspace'
        }
    }

    options {
        buildDiscarder(logRotator(daysToKeepStr: '30'))
        disableConcurrentBuilds()
        timestamps()
    }

    environment {
        JENKINS_IMG_NAME = "jenkins-agent:${env.BUILD_NUMBER}"
    }

    stages {
        stage('Prepare Workspace') {
            steps {
                script {
                    echo "DEBUG: JENKINS_IMG_NAME=${env.JENKINS_IMG_NAME}"
                    // Ensure the workspace directory exists and is writable on the host
                    sh '''
                        if [ ! -d /custom/jenkins/workspace ]; then
                            sudo mkdir -p /custom/jenkins/workspace
                        fi
                        sudo chmod -R 777 /custom/jenkins/workspace
                        sudo chown -R jenkins:jenkins /custom/jenkins/workspace
                    '''
                }
            }
        }

        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Build Docker Image') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockeragent', usernameVariable: 'USERNAME', passwordVariable: 'USERPASS')]) {
                    script {
                        sh '''
                            echo $USERPASS | docker login -u $USERNAME --password-stdin
                            docker build -t ${env.JENKINS_IMG_NAME} -f Dockerfile.agent .
                            docker tag ${env.JENKINS_IMG_NAME} exaclly/${env.JENKINS_IMG_NAME}
                            docker push exaclly/${env.JENKINS_IMG_NAME}
                        '''
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                echo 'Starting cleanup process...'
                try {
                    node {
                        sh '''
                            echo "Removing Docker image: exaclly/${env.JENKINS_IMG_NAME}"
                            echo "DEBUG: JENKINS_IMG_NAME=${env.JENKINS_IMG_NAME}"
                            docker rmi exaclly/${env.JENKINS_IMG_NAME} || echo "Image exaclly/${env.JENKINS_IMG_NAME} already removed or not found."
                        '''
                    }
                } catch (Exception e) {
                    echo "Error during Docker image removal: ${e.getMessage()}"
                }

                // Clean workspace using cleanWs step
                cleanWs()

                echo 'Cleanup process completed.'
            }
        }
    }
}
