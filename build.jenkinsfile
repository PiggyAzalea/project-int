pipeline {
    agent any

    environment {
        PYTHON_IMG_NAME = "python-app:${BUILD_NUMBER}"
        NGINX_IMG_NAME = "nginx-static:${BUILD_NUMBER}"
        SNYK_TOKEN = credentials('snyk-token')
    }

    stages {
        stage('Build Docker Images') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub', usernameVariable: 'USERNAME', passwordVariable: 'USERPASS')]) {
                    script {
                        sh '''
                            echo "$USERPASS" | docker login -u "$USERNAME" --password-stdin
                            docker build -t "$PYTHON_IMG_NAME" -f Dockerfile.python .
                            docker tag "$PYTHON_IMG_NAME" exaclly/"$PYTHON_IMG_NAME"
                            docker push exaclly/"$PYTHON_IMG_NAME"
                            echo "$USERPASS" | docker login -u "$USERNAME" --password-stdin
                            docker build -t "$NGINX_IMG_NAME" -f Dockerfile.nginx .
                            docker tag "$NGINX_IMG_NAME" exaclly/"$NGINX_IMG_NAME"
                            docker push exaclly/"$NGINX_IMG_NAME"
                        '''
                    }
                }
            }
        }

        stage('Install Dependencies') {
            steps {
                sh 'pip3 install -r requirements.txt'
            }
        }

        stage('Verify .pylintrc Encoding') {
            steps {
                sh '''
                    if ! file .pylintrc | grep -q 'UTF-8'; then
                        iconv -f ISO-8859-1 -t UTF-8 .pylintrc -o .pylintrc.utf8
                        mv .pylintrc.utf8 .pylintrc
                    fi
                '''
            }
        }

        stage('Verify .pylintrc Presence') {
            steps {
                sh 'ls -la'
            }
        }

        stage('Static Code Linting') {
            steps {
                script {
                    // Ensure the files exist before linting
                    def filesToLint = ['app.py', 'test.py']
                    def missingFiles = filesToLint.findAll { !fileExists(it) }

                    if (missingFiles) {
                        error "Linting files not found: ${missingFiles.join(', ')}"
                    } else {
                        sh '''
                            echo "Running pylint on app.py..."
                            pylint --rcfile=.pylintrc app.py > pylint_app.log || true
                            echo "Running pylint on test.py..."
                            pylint --rcfile=.pylintrc test.py > pylint_test.log || true
                        '''
                    }
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: 'pylint_app.log, pylint_test.log', allowEmptyArchive: true
                    script {
                        try {
                            def pylintAppLog = readFile('pylint_app.log')
                            def pylintTestLog = readFile('pylint_test.log')
                            def pylintIssuesApp = pylintAppLog.split('\n').findAll { it.trim() }
                            def pylintIssuesTest = pylintTestLog.split('\n').findAll { it.trim() }
                            def totalIssues = pylintIssuesApp.size() + pylintIssuesTest.size()

                            if (totalIssues > 0) {
                                currentBuild.result = 'UNSTABLE'
                                echo "Found ${totalIssues} pylint issues."
                                echo "Pylint issues in app.py:\n${pylintAppLog}"
                                echo "Pylint issues in test.py:\n${pylintTestLog}"
                            } else {
                                echo 'No pylint issues found.'
                            }
                        } catch (Exception e) {
                            echo "Error reading pylint logs: ${e}"
                        }
                    }
                }
            }
        }

        stage('Unittest') {
            steps {
                script {
                    sh 'python3 -m pytest --junitxml results.xml tests/'
                }
            }
            post {
                always {
                    junit allowEmptyResults: true, testResults: 'results.xml'
                }
            }
        }

        stage('Snyk Scan Python Image') {
            steps {
                withCredentials([string(credentialsId: 'snyk-token', variable: 'SNYK_TOKEN')]) {
                    withEnv(["SNYK_TOKEN=${SNYK_TOKEN}"]) {
                        sh '''
                            snyk auth $SNYK_TOKEN
                            snyk container test exaclly/$PYTHON_IMG_NAME --file=Dockerfile.python --policy-path=.snyk
                        '''
                    }
                }
            }
        }

        stage('Snyk Scan Nginx Image') {
            steps {
                withCredentials([string(credentialsId: 'snyk-token', variable: 'SNYK_TOKEN')]) {
                    withEnv(["SNYK_TOKEN=${SNYK_TOKEN}"]) {
                        sh '''
                            snyk auth $SNYK_TOKEN
                            snyk container test exaclly/$NGINX_IMG_NAME --file=Dockerfile.nginx --policy-path=.snyk
                        '''
                    }
                }
            }
        }

        stage('Deploy Containers') {
            steps {
                script {
                    def dockerComposeContent = """
                    version: '3.8'

                    services:
                      python_app:
                        image: exaclly/$PYTHON_IMG_NAME
                        ports:
                          - "8000:8000"

                      nginx:
                        image: exaclly/$NGINX_IMG_NAME
                        ports:
                          - "8445:8444"
                    """
                    writeFile file: 'docker-compose.yaml', text: dockerComposeContent
                    sh 'docker-compose down'
                    sh 'docker-compose up -d'
                }
            }
        }
    }

    post {
        always {
            script {
                echo 'Starting cleanup process...'
                try {
                    sh '''
                        echo "Removing Docker image: exaclly/${PYTHON_IMG_NAME}"
                        docker rmi exaclly/${PYTHON_IMG_NAME} || echo "Image exaclly/${PYTHON_IMG_NAME} already removed or not found."
                    '''
                } catch (Exception e) {
                    echo "Error during Docker image removal of ${PYTHON_IMG_NAME}: ${e}"
                }
                try {
                    sh '''
                        echo "Removing Docker image: exaclly/${NGINX_IMG_NAME}"
                        docker rmi exaclly/${NGINX_IMG_NAME} || echo "Image exaclly/${NGINX_IMG_NAME} already removed or not found."
                    '''
                } catch (Exception e) {
                    echo "Error during Docker image removal of ${NGINX_IMG_NAME}: ${e}"
                }
                cleanWs()
                echo 'Cleanup process completed.'
            }
        }
    }
}
