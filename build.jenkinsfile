pipeline {
    agent any

    environment {
        PYTHON_IMG_NAME = "python-app:${BUILD_NUMBER}" // Define environment variables for Docker image names using the current build number
        NGINX_IMG_NAME = "nginx-static:${BUILD_NUMBER}"
        SNYK_TOKEN = credentials('snyk-token') // Define Snyk token for security scanning
    }

    stages {
        stage('Build Docker Images') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub', usernameVariable: 'USERNAME', passwordVariable: 'USERPASS')]) {
                    script {
                        sh '''
                            // Log in to Docker Hub
                            echo "$USERPASS" | docker login -u "$USERNAME" --password-stdin
                            // Build and push the Python application Docker image
                            docker build -t "$PYTHON_IMG_NAME" -f Dockerfile.python .
                            docker tag "$PYTHON_IMG_NAME" exaclly/"$PYTHON_IMG_NAME"
                            docker push exaclly/"$PYTHON_IMG_NAME"

                            // Build and push the Nginx Docker image
                            echo "$USERPASS" | docker login -u "$USERNAME" --password-stdin
                            docker build -t "$NGINX_IMG_NAME" -f Dockerfile.nginx .
                            docker tag "$NGINX_IMG_NAME" exaclly/"$NGINX_IMG_NAME"
                            docker push exaclly/"$NGINX_IMG_NAME"
                        '''
                    }
                }
            }
        }

        stage('Install Dependencies') {
            steps {
                sh 'pip3 install -r requirements.txt' // Install required Python dependencies
            }
        }

        stage('Static Analysis and Tests') {
            parallel {
                stage('Static Code Linting') {
                    steps {
                        script {
                            // Run pylint for static code analysis
                            def pylintStatus = sh(script: 'python3 -m pylint -f parseable --reports=no *.py > pylint.log', returnStatus: true)
                            if (pylintStatus != 0) {
                                currentBuild.result = 'UNSTABLE'
                            }
                        }
                    }
                    post {
                        always {
                            // Display pylint log and record issues
                            sh 'cat pylint.log'
                            recordIssues (
                                enabledForFailure: true,
                                aggregatingResults: true,
                                tools: [pyLint(name: 'Pylint', pattern: '**/pylint.log')]
                            )
                        }
                    }
                }
                stage('Unittest') {
                    steps {
                        script {
                            // Run unit tests using pytest
                            sh 'python3 -m pytest --junitxml results.xml tests/'
                        }
                    }
                    post {
                        always {
                            // Publish test results
                            junit allowEmptyResults: true, testResults: 'results.xml'
                        }
                    }
                }
            }
        }

        stage('Snyk Scan Python Image') {
            steps {
                withCredentials([string(credentialsId: 'snyk-token', variable: 'SNYK_TOKEN')]) {
                    withEnv(["SNYK_TOKEN=${SNYK_TOKEN}"]) {
                        sh '''
                            // Authenticate with Snyk and scan the Python Docker image
                            snyk auth $SNYK_TOKEN
                            snyk container test exaclly/$PYTHON_IMG_NAME --file=Dockerfile.python --policy-path=.snyk
                        '''
                    }
                }
            }
        }

        stage('Snyk Scan Nginx Image') {
            steps {
                withCredentials([string(credentialsId: 'snyk-token', variable: 'SNYK_TOKEN')]) {
                    withEnv(["SNYK_TOKEN=${SNYK_TOKEN}"]) {
                        sh '''
                            // Authenticate with Snyk and scan the Nginx Docker image
                            snyk auth $SNYK_TOKEN
                            snyk container test exaclly/$NGINX_IMG_NAME --file=Dockerfile.nginx --policy-path=.snyk
                        '''
                    }
                }
            }
        }

        stage('Deploy Containers') {
            steps {
                script {
                    // Define Docker Compose content for deploying the containers
                    def dockerComposeContent = """
                    version: '3.8'

                    services:
                      python_app:
                        image: exaclly/$PYTHON_IMG_NAME
                        ports:
                          - "8000:8000"

                      nginx:
                        image: exaclly/$NGINX_IMG_NAME
                        ports:
                          - "8445:8444"
                    """
                    // Write Docker Compose file and deploy containers
                    writeFile file: 'docker-compose.yaml', text: dockerComposeContent
                    sh 'docker-compose down'
                    sh 'docker-compose up -d'
                }
            }
        }
    }

    post {
        always {
            script {
                echo 'Starting cleanup process...'
                try {
                    sh '''
                        // Remove the Python Docker image
                        echo "Removing Docker image: exaclly/${PYTHON_IMG_NAME}"
                        docker rmi exaclly/${PYTHON_IMG_NAME} || echo "Image exaclly/${PYTHON_IMG_NAME} already removed or not found."
                    '''
                } catch (Exception e) {
                    echo "Error during Docker image removal of ${PYTHON_IMG_NAME}: ${e}"
                }
                try {
                    sh '''
                        // Remove the Nginx Docker image
                        echo "Removing Docker image: exaclly/${NGINX_IMG_NAME}"
                        docker rmi exaclly/${NGINX_IMG_NAME} || echo "Image exaclly/${NGINX_IMG_NAME} already removed or not found."
                    '''
                } catch (Exception e) {
                    echo "Error during Docker image removal of ${NGINX_IMG_NAME}: ${e}"
                }
                // Clean up the workspace
                cleanWs()
                echo 'Cleanup process completed.'
            }
        }
    }
}
